// Code generated by protoc-gen-go. DO NOT EDIT.
// source: define.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// user sending the message
// text message (mess) and sended to (to)
type Text struct {
	Msg                  *TextMail `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Text) Reset()         { *m = Text{} }
func (m *Text) String() string { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()    {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_define_f60987a0f11b83a9, []int{0}
}
func (m *Text) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Text.Unmarshal(m, b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Text.Marshal(b, m, deterministic)
}
func (dst *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(dst, src)
}
func (m *Text) XXX_Size() int {
	return xxx_messageInfo_Text.Size(m)
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetMsg() *TextMail {
	if m != nil {
		return m.Msg
	}
	return nil
}

type TextMail struct {
	From                 string   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To                   string   `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Mess                 string   `protobuf:"bytes,3,opt,name=mess" json:"mess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextMail) Reset()         { *m = TextMail{} }
func (m *TextMail) String() string { return proto.CompactTextString(m) }
func (*TextMail) ProtoMessage()    {}
func (*TextMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_define_f60987a0f11b83a9, []int{0, 0}
}
func (m *TextMail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextMail.Unmarshal(m, b)
}
func (m *TextMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextMail.Marshal(b, m, deterministic)
}
func (dst *TextMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMail.Merge(dst, src)
}
func (m *TextMail) XXX_Size() int {
	return xxx_messageInfo_TextMail.Size(m)
}
func (m *TextMail) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMail.DiscardUnknown(m)
}

var xxx_messageInfo_TextMail proto.InternalMessageInfo

func (m *TextMail) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TextMail) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TextMail) GetMess() string {
	if m != nil {
		return m.Mess
	}
	return ""
}

// string notifier
type Str struct {
	Noti                 string   `protobuf:"bytes,1,opt,name=noti" json:"noti,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Str) Reset()         { *m = Str{} }
func (m *Str) String() string { return proto.CompactTextString(m) }
func (*Str) ProtoMessage()    {}
func (*Str) Descriptor() ([]byte, []int) {
	return fileDescriptor_define_f60987a0f11b83a9, []int{1}
}
func (m *Str) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Str.Unmarshal(m, b)
}
func (m *Str) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Str.Marshal(b, m, deterministic)
}
func (dst *Str) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Str.Merge(dst, src)
}
func (m *Str) XXX_Size() int {
	return xxx_messageInfo_Str.Size(m)
}
func (m *Str) XXX_DiscardUnknown() {
	xxx_messageInfo_Str.DiscardUnknown(m)
}

var xxx_messageInfo_Str proto.InternalMessageInfo

func (m *Str) GetNoti() string {
	if m != nil {
		return m.Noti
	}
	return ""
}

// acknowledgment of the message
type Ack struct {
	Done                 bool     `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_define_f60987a0f11b83a9, []int{2}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (dst *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(dst, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func init() {
	proto.RegisterType((*Text)(nil), "proto.text")
	proto.RegisterType((*TextMail)(nil), "proto.text.mail")
	proto.RegisterType((*Str)(nil), "proto.str")
	proto.RegisterType((*Ack)(nil), "proto.ack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chatter service

type ChatterClient interface {
	// registers the user entering the server room
	Enter(ctx context.Context, in *Str, opts ...grpc.CallOption) (*Str, error)
	// sends message text to the server
	Send(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Ack, error)
	// gets/receives message from the server
	Receive(ctx context.Context, in *Str, opts ...grpc.CallOption) (*Text, error)
}

type chatterClient struct {
	cc *grpc.ClientConn
}

func NewChatterClient(cc *grpc.ClientConn) ChatterClient {
	return &chatterClient{cc}
}

func (c *chatterClient) Enter(ctx context.Context, in *Str, opts ...grpc.CallOption) (*Str, error) {
	out := new(Str)
	err := grpc.Invoke(ctx, "/proto.chatter/enter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatterClient) Send(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.chatter/send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatterClient) Receive(ctx context.Context, in *Str, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := grpc.Invoke(ctx, "/proto.chatter/receive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chatter service

type ChatterServer interface {
	// registers the user entering the server room
	Enter(context.Context, *Str) (*Str, error)
	// sends message text to the server
	Send(context.Context, *Text) (*Ack, error)
	// gets/receives message from the server
	Receive(context.Context, *Str) (*Text, error)
}

func RegisterChatterServer(s *grpc.Server, srv ChatterServer) {
	s.RegisterService(&_Chatter_serviceDesc, srv)
}

func _Chatter_Enter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Str)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).Enter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatter/Enter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).Enter(ctx, req.(*Str))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatter_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatter/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).Send(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatter_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Str)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatter/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).Receive(ctx, req.(*Str))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chatter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatter",
	HandlerType: (*ChatterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "enter",
			Handler:    _Chatter_Enter_Handler,
		},
		{
			MethodName: "send",
			Handler:    _Chatter_Send_Handler,
		},
		{
			MethodName: "receive",
			Handler:    _Chatter_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "define.proto",
}

func init() { proto.RegisterFile("define.proto", fileDescriptor_define_f60987a0f11b83a9) }

var fileDescriptor_define_f60987a0f11b83a9 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x4e, 0x84, 0x30,
	0x10, 0x40, 0x59, 0xe8, 0xba, 0x3a, 0x6b, 0x8c, 0x99, 0x13, 0xee, 0x49, 0x1a, 0x0f, 0x9e, 0x38,
	0xe0, 0xdd, 0x8f, 0xe0, 0x0f, 0x6a, 0x19, 0xb4, 0x62, 0x5b, 0xd3, 0x8e, 0xc6, 0xcf, 0x37, 0x53,
	0xd4, 0xe0, 0x89, 0x37, 0xbc, 0x37, 0x4d, 0x0b, 0x97, 0x13, 0xcd, 0x2e, 0x50, 0xff, 0x9e, 0x22,
	0x47, 0xdc, 0x97, 0x8f, 0x7e, 0x05, 0xc5, 0xf4, 0xc5, 0xa8, 0xa1, 0xf1, 0xf9, 0xb9, 0xdd, 0xdd,
	0xee, 0xee, 0x8f, 0xc3, 0xf5, 0xda, 0xf4, 0x62, 0x7a, 0x6f, 0xdc, 0xdb, 0x28, 0xf2, 0xf4, 0x08,
	0x4a, 0x06, 0x44, 0x50, 0x73, 0x8a, 0xbe, 0xc4, 0x17, 0x63, 0x61, 0xbc, 0x82, 0x9a, 0x63, 0x5b,
	0x97, 0x3f, 0x35, 0x47, 0x69, 0x3c, 0xe5, 0xdc, 0x36, 0x6b, 0x23, 0xac, 0x6f, 0xa0, 0xc9, 0x9c,
	0x44, 0x85, 0xc8, 0xee, 0x77, 0x5d, 0x58, 0x94, 0xb1, 0x8b, 0xa8, 0x29, 0x06, 0x2a, 0xea, 0x7c,
	0x2c, 0x3c, 0x7c, 0xc0, 0xc1, 0xbe, 0x18, 0x66, 0x4a, 0xd8, 0xc1, 0x9e, 0x82, 0x00, 0xfc, 0x5c,
	0x30, 0x73, 0x3a, 0x6d, 0x58, 0x57, 0xd8, 0x81, 0xca, 0x14, 0x26, 0x3c, 0x6e, 0x9e, 0xf0, 0x97,
	0x18, 0xbb, 0xe8, 0x0a, 0xef, 0xe0, 0x90, 0xc8, 0x92, 0xfb, 0xa4, 0x7f, 0xe7, 0x6c, 0x37, 0x74,
	0xf5, 0x74, 0x56, 0xa6, 0x87, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x17, 0x83, 0xee, 0x36,
	0x01, 0x00, 0x00,
}
